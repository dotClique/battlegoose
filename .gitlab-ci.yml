# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Android.gitlab-ci.yml

# Read more about this script on this blog post https://about.gitlab.com/2018/10/24/setting-up-gitlab-ci-for-android-projects/, by Jason Lenny
# If you are interested in using Android with FastLane for publishing take a look at the Android-Fastlane template.

image: larsselbekk/battlegoose-ci:1.0

stages:
  - build
  - test
  - visualize

# Packages installation before running script
.android_setup_template: &android_setup
  before_script:
    - chmod +x ./gradlew
    - >
      yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses || true
      sdkmanager --sdk_root=${ANDROID_HOME} "platforms;android-${ANDROID_COMPILE_SDK}"
      sdkmanager --sdk_root=${ANDROID_HOME} "platform-tools"
      sdkmanager --sdk_root=${ANDROID_HOME} "build-tools;${ANDROID_BUILD_TOOLS}"
  cache:
    paths:
      - .gradle/wrapper
      - .gradle/caches

# Basic android and gradle stuff
# Check linting
lint:
  <<: *android_setup
  interruptible: true
  stage: build
  script:
    - ./gradlew -Pci --console=plain lint -PbuildDir=lint

# Run ktlint - Linting and formatting
ktlint:
  <<: *android_setup
  interruptible: true
  stage: build
  script:
    - ./gradlew -Pci --console=plain ktlint

# Make Project
assemble:
  <<: *android_setup
  interruptible: true
  stage: build
  script:
    - ./gradlew assembleDebug
  artifacts:
    expose_as: APK
    paths:
      - android/build/outputs/apk/debug/android-debug.apk

# Run all tests, if any fails, interrupt the pipeline(fail it)
unitTests:
  <<: *android_setup
  interruptible: true
  stage: test
  script:
    - ./gradlew -Pci --console=plain test
    - >
      awk -F"," '{ instructions += $4 + $5; covered += $5 } END { print covered, "/",
      instructions, " instructions covered"; print 100*covered/instructions, "% covered" }'
      core/build/reports/jacoco/test/jacocoTestReport.csv
  coverage: "/([0-9]{1,3}.[0-9]*).%.covered/"
  artifacts:
    when: always
    expose_as: "Test results"
    paths:
      - core/build/reports/jacoco/
      - core/build/test-results/
    reports:
      junit: core/build/test-results/test/**/TEST-*.xml
